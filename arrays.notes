-----------------------------------------------------------
    10/25/2017
-----------------------------------------------------------
-arrays: store a list of values of the same type
-for now, size of array needs to be determined at compile time
[c++]
bool isValidDate(int year, int month, int day) {
	int daysInMonth[12] = {
		31, 28, 31, 30, 31, 30,
		31, 31, 30, 31, 30, 31
	};
	if(month < 1 || month > 12 || day < 1) 
		return false;

	if(month != 2) 
		return day <= daysInMonth[month - 1];;
}
[/c++]

-----------------------------------------------------------
    10/30/2017  
-----------------------------------------------------------
-take position of start of array and add the bytes (index 2 = 8 bytes from index 0 if ints are 4 bytes)
-most compilers will give you a random piece of memory if you access an index out of bounds
	this is dangerous because if you store values there, you can overwrite what the old memory location was being used for (eg value of another variable)
-use const with the array if you don't want the elements of the array to change

[c++]
"suppose we wanted to print out the month number and the months with 31 days"
bool isValidDate(int year, int month, int day) {
	const int daysInMonth[12] = {
		31, 28, 31, 30, 31, 30,
		31, 31, 30, 31, 30, 31
	};

	if(month < 1 || month > 12 || day < 1) {
		return false;
	} 

	if(month != 2) 
		return day <= daysInMonth[month - 1];

	const int N_MONTHS = 12;
	const string monthName[N_MONTHS] = {
		"January", "February"...
		"December"
	};

	if(month < 1 || month > N_MONTHS)
		cout << "Bad month number " << m << "!\n";
	else 
		cout << monthName[month - 1];

	cout << "These months have 31 days:\n";
	for(int i = 0; i < N_MONTHS; ++i) {
		if(daysInMonth[i] == 31) 
			cout << monthName[i]; "Data structure design matches the month to the number of days it corresponds to"
	}

}
[/c++]

-type casting
-calcuate the average of the scores 
[c++]
int nScores = 0;
int total = 0;
cout << "Enter the scores: (nagative to quit)\n";
for(;;) {
	int score;
	cin >> score;
	if(score < 0)
		break;
	total += score;
	nScores++;
} 
if(nScores  == 0)
	cout << "There were no scores, so no mean\n";
else
	cout << "The mean of all scores is " << static_cast<double>(total)/nScores << endl; //cast total to double for floating point division
[/c++]

-now suppose we wanted to calculate the standard deviation of the scores as well
-use an array!
	-create an array that's big enough to store the number of scores

[c++]
const int MAX_NUMBER_OF_SCORES = 1000;
int scores[MAX_NUMBER_OF_SCORES];
int nScores = 0;
int total = 0;
cout << "Enter the scores: (nagative to quit)\n";
for(;;) {
	int score;
	cin >> score;
	if(score < 0)
		break;
	scores[nScores] = score;
	total += score;
	nScores++;
} 
if(nScores  == 0)
	cout << "There were no scores, so no mean\n";
else
	cout << "The mean of all scores is " << static_cast<double>(total)/nScores << endl; //cast total to double for floating point division
	double sumOfSquares = 0;
	for(int i = 0; i < nScores; ++i) {
		double diff = scores[k] - mean;
		sumOfSquares += diff * diff;
	}
	cout << "The std. devation is " << sqrt(sumOfSquares / nScores) << endl;
[/c++]

-----------------------------------------------------------
    11/1/17
-----------------------------------------------------------
Passing arrays as parameters
-Use const if the function isn't going to modify the array
-It's ok for a function that modifies an array to call a function that takes in a const array
-It's not ok for a function that takes a const array and pass it to a function that could modify it (won't compile)
-for instance, setAll can call computeMean but computeMean can't call setAll
	-fast memory vs slow memory (compiler optimization)
[c++]
"This program sets the first n elements of the array to value"
void setAll(int arr[], int n, int value) {
	for(int i = 0; i < n; ++i) {
		arr[i] = value;
	}
}
[/c++]

Suppose we wanted to keep track of the attendance over a period of 5 weeks...how to organize the data?
-single array with 35 elements (messy)
-2d array (5 * 7), better
	-access element with row, column
[c++]
"Get the total attendance for each week"
const int NWEEKS = 5;
const int NDAYS = 7;
int attendance[NWEEKS][NDAYS];

for(int i = 0; i < NWEEKS; ++i) {
	int total = 0;
	for(int j = 0; j < NDAYS; ++j) {
		total += attendance[i][j]
	}
	cout << "The total for week " << i << " is " << total >> endl; 
}	

"Get the total attendance for the weekends of the month...and the total attendance for each day of the weekend"
"Let 0 represent Monday and 6 represent Sunday because it is convenient"
const string dayNames[NDAYS] =  {
	"Monday", "Tuesday", "Wednesday", "Thursday"
	"Friday", "Saturday", "Sunday"
};

int grandTotal = 0;
for(int i = 4; i < NDAYS; ++i) {
	int total = 0;
	for(int j = 0; j < ; ++j) {
		total += attendance[i][j];
	}
	cout << "The total for " << dayNames[i] << " is " << total << endl;
	grandTotal += total;
}
cout << "Over the course of " << NWEEKS << " weeks, weekend attendance was " << grandTotal << endl;
[/c++]

Now suppose we have 16 monitors that track the attendance over a period of 5 weeks
And business is booming so we open up more theatres
[c++]
int attendance[16][5][7]; "3d array for 16 monitors"
int attendance[100][16][5][7]; "100 locations, all with 16 monitors"
[/c++]

Back to Strings
-string comparisons
	-not length comparison
	-character by character comparison
		-let t = hello and s = help
			-t < s since l < p at position 4
		-let t = hello and s = hello!!!
			-t < s since t ends before s does

C Strings
-array of characters
-'\0' represents the end of a c string (zero byte)
-have to declare the size of the array
-loop through the array until you reach the zero byte to get the length, or use the cstring library
[c++]
#include <cstring>

char s[100] = "";
char t[9] = { 'H', 'e', 'l', 'l', 'o', '\0' }; "this is tedious"
char t[9] = "Hello"; "zero byte is implied"

cout << strlen(t); "returns the number of characters up to but not including \0"
cin.getline(s, 100); "read a line into s the maximum number of characters"

strcpy(s, t); "destination, source. Copies one array to another (t to s)"	

char x[5] = "hello"; "this will not compile...needs size of 6 bc of \0"
char y[3] = { 'A', 'B', 'C' }; "this is valid...however do not use as a c string"
strlen(y); "however this will result in undefined behavior since there is no \0"
strcpy(y, t); "undefined behavior since y is not large enough to store all the characters in t"
[/c++]



WILL BE ASKED ABOUT THE SIZE OF AN ARRAY




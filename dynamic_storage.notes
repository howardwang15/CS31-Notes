-----------------------------------------------------------
    11/27/2017
-----------------------------------------------------------
Pointers
	-Manipulate dynamic storage
	-Represent relations in data structures

-in the target example, some people might be really good at the game but the majority of the people might suck...therefore it would be a bad idea
 to create and array of 1000 targets if most of the time, they won't be used and it takes time to create a lot of them
-create an array of pointers instead...only create when they are needed
-use the "new" keyword to create a Target object (type = pointer to the type)
	-individually allocated objects might be scattered all over memory...there's no guarantee that the occupy a contiguous block of memory
	-same as Java...except all Java objects are pointers 

[c++]
int main () {
	Target* target[1000]; "constructor is not called"
	int nTargets = 0; 

	targets[nTargets] = new Target; "this calls the constructor...generates a pointer to Target"
	nTargets++;

	targets[0]->move('L');
}	
[/c++]

-suppose we wanted to remove a target
[c++]
void playGame() {
	Target* targets[1000];
	int nTargets = 0;
	for (int i = 0; i < 3; ++i) {
		targets[nTargets] = new Target;
		nTargets++;
	}

	int i = 1;
	targets[i]-move('L');
	targets[1] = targets[2]; "targets[1] points to the same thing as targets[2]"
	nTargets--; "decrease the number of targets we are working with"
	targets[2] = nullptr; "unneceesary but comforting"
}
[/c++]

-however there's a problem with the above code for removing a target
-suppose the function playGame is called a bunch of times...the information pointed to initially by targets[1] is lost...there's no way to get it (we got rid of the pointer to it)
	-this causes an accumulation of "garbage"...meaning there's more and more memory that the program can't use...total memory usage grows and grows (memory leak)
	-since this takes a long time, it is hard to find out what the root of the problem is 
-Garbage collection is available in many programming languages (Java) but not in C++ bc you sacrifice control for performance
	-Sometimes garbage collection happens at a bad time (no more memory to create something, so the character dies while waiting for garbage collection to finish...)
-use the keyword "delete" to get rid the object...however the pointer is still there ("dangling pointer")
	-can only use delete with a pointer
	-can be used on a null pointer
	-undefined behavior if delete is used on a dangling pointer or uninitialized pointer

[c++]
void playGame() {
	Target* targets[1000];
	int nTargets = 0;
	for (int i = 0; i < 3; ++i) {
		targets[nTargets] = new Target;
		nTargets++;
	}

	int i = 1;
	targets[i]->move('L');
	delete targets[1];
	targets[1] = targets[2];
	nTargets--;
	targets[2] = nullptr;
}
[/c++]

-however there is still a memory leak...when the function ends, the local variables disappear but the objects are still left
[c++]
void playGame() {
	Target* targets[1000];
	int nTargets = 0;
	for (int i = 0; i < 3; ++i) {
		targets[nTargets] = new Target;
		nTargets++;
	}

	int i = 1;
	targets[i]->move('L');
	delete targets[1];
	targets[1] = targets[2];
	nTargets--;
	targets[2] = nullptr;
	for (int i = 0; i < nTargets; ++i) "notice how we don't loop through all 1000 elements" 
		delete targets[i];

	"who cares about the dangling pointers this causes because we're about to leave the function"
}
[/c++]

-can have more than one constructor for a class as long as the arguments list is different
-array of objects can only be used with a constructor with no argumentts 
[c++]
class Pet {
	public:
		Pet(int initialHealth, string nm);
		string name() const;
	private:
		int m_health;
		string m_name;
};

Pet::Pet(int initialHealth, string nm) {
	m_health = initialHealth;
	m_name = nm;
}

string Pet::name() const{
	return m_name;
}

int main () {
	Pet x(10, "Fido");
	cout << x.name();
	Pet* ppa[5];
	ppa[0] = new Pet(20, "Snowflake");
}
[/c++]

-----------------------------------------------------------
    11/29/17 & 12/4/17
-----------------------------------------------------------
-Places where objects can live
	-local variables live on the stack
		-internal data structure OS sets up (adds and removes the variables created)	
		-really efficient to create the space and get rid of the space for them
	-dynamically allocated objects live on the heap
		-call function that allocates the object and save the pointer so it can be used outside of the function
		-do not go away until you delete them 
	-global variables live in the global storage area (static storage area)
		-not generally good practice since any function can change it (hard to debug)
		-just pass it in as a parameter!

suppose we wanted certain pets to have favorite toys
-dynamically allocate a new Toy object
	-however we have to be careful to remember to delete...thus making a function to delete an object that WE have to call every time the object is about to disappear is a BAD IDEA
	-make a destructor
		-clean up 
		-takes no arguments
		-automatically called whenever an object of the type goes out of scope

[c++]
class Toy {
	...
};
class Pet {
	public:
		Pet(int initialHealth, string nm);
		~Pet(); "destructor"
		string name() const;
		void addToy();
	private:
		int m_health;
		string m_name; 
		Toy* m_favorite; "we shouldn't put a toy data member here since not all pets have to have favorite toys. Put a pointer here instead (can set to null)"
};

Pet::Pet(int initialHealth, string nm) {
	m_health = initialHealth;
	m_name = nm;
	m_favorite = nullptr;
}

Pet::~Pet() {
	delete m_favorite;
}

string Pet::name() const{
	return m_name;
}

void Pet::addToy() {
	delete m_favorite; "this fixes memory leak problem if addToy gets called more than once in a function"
	m_favorite = new Toy;
}

int main () {
	Pet x(10, "Fido");
	x.addToy(); 
}
[/c++]

-constructor is a zero-arugment constructor
-If you declare no constructors at all, the compiler writes a default constructor for you that leaves member variables of built-in types uninitialized and default constructs 
-members of a class type
-If you declare a constructor, the compiler will not generate the default constructor
-Suppose we created an object this way
	Target u();
	-this is allowed but no object will be declared...it's just a function that takes no arguments and returns a Target object 	 

-back to company example
	-suppose we wanted to give employees bonuses based on their salaries but we don't want the receiveBonus function to take any parameters (ie no bonusRate in employee class)
	-notice that we don't need a destructor for Employee since it's unreasonable to delete a company if the employee disappears	
	-since employees depend on companies and companies depend on employees but both are pointers, we can just give company declaration before we define the employee class

[c++]
class Company;

class Employee {
	public:
		Employee(string name, double salary, int age, Company* cp);
		void receiveBonus() const;
	private:
		string m_name;
		double m_salary;
		int m_age;
		Company* m_company;
};

class Company {
	public:
		Company();
		~Company();
		void hire(string name, double salary, int age);
		void setBonus(double rate);
		void giveBonus() const;
		void receiveBonus();
		double bonusRate() const;
	private:
		Employee* m_employees[100];
		int nEmployees;
		double m_bonusRate;
};

Employee::Employee(string name, double salary, int age, Company* cp) {
	m_name = name;
	m_salary = salary;
	m_age = age;
	m_company = cp;
}

void Employee::receiveBonus() {
	cout << "Pay to the order of " << m_name << " the amount $" << m_salary * m_company->bonusRate() << endl;
}

Company::Company() {
	nEmployees = 0;
	m_bonusRate = 0;
}

Company::~Company() {
	for (int i = 0; i < nEmployees; ++i) 
		delete m_employees[i];
}

void Company::setBonus(double rate) {
	m_bonusRate = rate;
}

double Company::bonusRate() {
	return m_bonusRate;
}

void Company::hire(string name, double salary, int age) {
	m_employees[nEmployees] = new Employee(name, salary, age, this);
	nEmployees++;
}

void Company::giveBonus() const{
	for (int i = 0; i < nEmployees; ++i) {
		m_employees[i]->receiveBonus();
	}
}
[/c++]

-----------------------------------------------------------
    12/4/17
-----------------------------------------------------------
-How to decide if class should have an object or pointer to object in it?
	-ask "what happens if the object of the current class is gone?"

[c++]
class Fan {
	public:
		void turnOn();
}

class Rock {
	public:
		double weight() const;
}

class Robot {
	Fan m_cooler; "once the robot disappears, the fan should disappear as well"
	Rock* m_rock; "rock can remain however if robot disappears"
}

void Robot::blah() {
	if (m_rock != nullptr && m_rock->weight() > 50) "Notice how we have to do null check first...or else if it would crash since we try to follow a null pointer"
		m_cooler.turnOn;
}
[/c++]


-we can overload constructors just like how we can overload functions by providing a different argument list
[c++]
class Complex {
	public: 
		Complex();
		Complex(double re, double im);
		double real() const;
		double imag() const;
	private:
		double m_real;
		double m_imag;
};

Complex::Complex() {
	m_real = 0;
	m_imag = 0;
}

Complex::Complex(double re, double im) {
	m_real = re;
	m_imag = im;
}


double Complex::real() const {
	return m_real;
}

double Complex::imag() const {
	return m_imag;
}

int main() {
	Complex c(4, -3); "represents 4 - 3i"
}
[/c++]


C++98 issues
[c++]
#include <cmath>
#include <iostream>

using namespace std;

int main () {
	double side;
	cin >> side;
	cout << side * sqrt(2) << endl; "ERROR: ambiguous"
}

we get a problem with the above program because cmath has different versions of sqrt
	float sqrt(float x);
	double sqrt(double x);
 	long double sqrt(long double x);
 however, if we use 2.0 instead, it would treat it as a double
[/c++]


In C++11
add another sqrt function! Takes an int argument and calls the double function
